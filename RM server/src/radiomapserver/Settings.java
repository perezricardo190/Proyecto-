
package radiomapserver;

import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * Settings class is responsible to configure the indoor and outdoor module ports.
 * User can set default NaN value to compute radio map mean.
 * Creates file config.txt to store those settings and reads them whenever is needed.
 */
public class Settings extends javax.swing.JFrame {

    private String PortNumIndoor = "65510";
    private String PortNumOutdoor = "65511";
    private String DefaultNaNValue = "-110";
    private String config_file = "config.txt";
    private final int MAX_PORT = 65535;
    private final int MIN_PORT = 49152;
    private final int MAX_NAN_VALUE = -80;
    private final int MIN_NAN_VALUE = -150;

    /**
     * Constructor of Settings Class
     * */
    public Settings() {
        initComponents();
        this.readSavedOptions();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        ConnectionTitle = new javax.swing.JPanel();
        Connection_description = new javax.swing.JLabel();
        Save = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        Port = new javax.swing.JLabel();
        IndoorPortText = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Port1 = new javax.swing.JLabel();
        OutdoorPortText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        Port2 = new javax.swing.JLabel();
        NaNValueText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Server - Settings");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        Background.setBackground(new java.awt.Color(153, 204, 255));

        ConnectionTitle.setBackground(new java.awt.Color(204, 204, 255));

        Connection_description.setFont(new java.awt.Font("Arial", 1, 12));
        Connection_description.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Connection_description.setLabelFor(ConnectionTitle);
        Connection_description.setText("Connection: Specify Settings to customize default values");
        Connection_description.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout ConnectionTitleLayout = new javax.swing.GroupLayout(ConnectionTitle);
        ConnectionTitle.setLayout(ConnectionTitleLayout);
        ConnectionTitleLayout.setHorizontalGroup(
            ConnectionTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConnectionTitleLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Connection_description)
                .addGap(4, 4, 4))
        );
        ConnectionTitleLayout.setVerticalGroup(
            ConnectionTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Connection_description)
        );

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(208, 239, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Indoor Mode"));

        Port.setFont(new java.awt.Font("Arial", 0, 12));
        Port.setText("Port");

        IndoorPortText.setText(this.PortNumIndoor);
        IndoorPortText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IndoorPortTextKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(Port, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IndoorPortText, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(IndoorPortText)
                    .addComponent(Port, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(208, 239, 254));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Outdoor Mode"));

        Port1.setFont(new java.awt.Font("Arial", 0, 12));
        Port1.setText("Port");

        OutdoorPortText.setText(this.PortNumOutdoor);
        OutdoorPortText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                OutdoorPortTextKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(Port1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OutdoorPortText, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Port1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(OutdoorPortText))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(208, 239, 254));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("NaN Value"));

        Port2.setFont(new java.awt.Font("Arial", 0, 12));
        Port2.setText("Value");

        NaNValueText.setText(this.DefaultNaNValue);
        NaNValueText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NaNValueTextKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(118, Short.MAX_VALUE)
                .addComponent(Port2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NaNValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NaNValueText)
                    .addComponent(Port2, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addComponent(ConnectionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addGroup(BackgroundLayout.createSequentialGroup()
                                .addComponent(Save)
                                .addGap(18, 18, 18)
                                .addComponent(Cancel))
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(47, 47, 47))))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ConnectionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cancel)
                    .addComponent(Save))
                .addContainerGap())
        );

        BackgroundLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel1, jPanel2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-371)/2, (screenSize.height-435)/2, 371, 435);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reads from file the saved settings
     * */
    public void readSavedOptions() {
        Scanner in = null;
        File f = new File(config_file);
        if (f.exists() && f.isFile()) {
            try {
                in = new Scanner(new BufferedInputStream(new FileInputStream(f)));

                // Read Indoor port
                if (in.hasNext()) {
                    this.PortNumIndoor = in.next();
                } else {
                    this.PortNumIndoor = "65510";
                }
                IndoorPortText.setText(this.PortNumIndoor);

                // Read Outdoor port
                if (in.hasNext()) {
                    this.PortNumOutdoor = in.next();
                } else {
                    this.PortNumOutdoor = "65511";
                }
                OutdoorPortText.setText(this.PortNumOutdoor);

                // Read NaN Value
                if (in.hasNext()) {
                    this.DefaultNaNValue = in.next();
                } else {
                    this.DefaultNaNValue = "-110";
                }
                NaNValueText.setText(this.DefaultNaNValue);

                in.close();
            } catch (Exception ex) {
                return;
            }
        }
    }

    /**
     * Getter of indoor port
     *
     * @return
     *          the indoor port, -1 if fail
     * */
    public int getPortNumIndoor() {
        if (PortNumIndoor != null) {
            try {
                return Integer.parseInt(PortNumIndoor);
            } catch (NumberFormatException nfe) {
                return -1;
            }
        } else {
            return -1;
        }
    }

    /**
     * Getter of outdoor port
     *
     * @return
     *          the outdoor port, -1 if fail
     * */
    public int getPortNumOutdoor() {
        if (PortNumOutdoor != null) {
            try {
                return Integer.parseInt(PortNumOutdoor);
            } catch (NumberFormatException nfe) {
                return -1;
            }
        } else {
            return -1;
        }
    }

    /**
     * Getter NaN Value
     *
     * @return
     *          the NaN Value, 0 if fail
     * */
    public int getDefaultNaNValue() {
        if (DefaultNaNValue != null) {
            try {
                return Integer.parseInt(DefaultNaNValue);
            } catch (NumberFormatException nfe) {
                return -110;
            }
        } else {
            return -110;
        }
    }

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelActionPerformed

    /**
     * When save is clicked ports and NaN value are stored
     * in text file if are correct
     * */
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        Save.setEnabled(false);

        // Get the input
        String port1 = IndoorPortText.getText();
        String port2 = OutdoorPortText.getText();
        String NaNValue = NaNValueText.getText();

        // Try to parse indoor port
        try {
            if (Integer.parseInt(port1) > MAX_PORT || Integer.parseInt(port1) < MIN_PORT) {
                throw new Exception();
            }
            this.PortNumIndoor = port1;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid indoor port [" + MIN_PORT + " - " + MAX_PORT + "]. Can't save.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Try to parse outdoor port
        try {
            if (Integer.parseInt(port2) > MAX_PORT || Integer.parseInt(port2) < MIN_PORT) {
                throw new Exception();
            }
            this.PortNumOutdoor = port2;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid outdoor port [" + MIN_PORT + " - " + MAX_PORT + "]. Can't save.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Try to parse NaN Value
        try {
            if (Integer.parseInt(NaNValue) > MAX_NAN_VALUE || Integer.parseInt(NaNValue) < MIN_NAN_VALUE) {
                throw new Exception();
            }
            this.DefaultNaNValue = NaNValue;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid NaN value [(" + MIN_NAN_VALUE + ") - (" + MAX_NAN_VALUE + ")]. Can't save.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Write new settings
        try {
            File file = new File(config_file);
            Writer writer = new BufferedWriter(new FileWriter(file));
            writer.write(this.PortNumIndoor + "\n" + this.PortNumOutdoor + "\n" + this.DefaultNaNValue);
            writer.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured. Can't save.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_SaveActionPerformed

    private void IndoorPortTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IndoorPortTextKeyTyped
        Save.setEnabled(true);
    }//GEN-LAST:event_IndoorPortTextKeyTyped

    private void OutdoorPortTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OutdoorPortTextKeyTyped
        Save.setEnabled(true);
    }//GEN-LAST:event_OutdoorPortTextKeyTyped

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        this.readSavedOptions();
    }//GEN-LAST:event_formWindowGainedFocus

    private void NaNValueTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NaNValueTextKeyTyped
        Save.setEnabled(true);
    }//GEN-LAST:event_NaNValueTextKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JButton Cancel;
    private javax.swing.JPanel ConnectionTitle;
    private javax.swing.JLabel Connection_description;
    private javax.swing.JTextField IndoorPortText;
    private javax.swing.JTextField NaNValueText;
    private javax.swing.JTextField OutdoorPortText;
    private javax.swing.JLabel Port;
    private javax.swing.JLabel Port1;
    private javax.swing.JLabel Port2;
    private javax.swing.JButton Save;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
